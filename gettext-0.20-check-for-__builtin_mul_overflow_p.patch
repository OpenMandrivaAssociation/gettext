diff -Naur gettext-0.20/configure.ac gettext-0.20.tpg/configure.ac
--- gettext-0.20/configure.ac	2019-04-02 15:54:47.000000000 +0000
+++ gettext-0.20.tpg/configure.ac	2019-05-14 20:16:49.541116986 +0000
@@ -37,6 +37,18 @@
 
 dnl Checks for library functions.
 
+AC_CACHE_CHECK([for gcc 7-compatible __builtin_mul_overflow_p],
+  [utils_cv_builtin_mul_overflow_p],
+  [AC_COMPILE_IFELSE(
+    [AC_LANG_PROGRAM(
+      [[]],
+      [[return __builtin_mul_overflow_p(1, 2, 3);]])],
+    [utils_cv_builtin_mul_overflow_p=yes],
+    [utils_cv_builtin_mul_overflow_p=no])])
+if test $utils_cv_builtin_mul_overflow_p = yes; then
+  AC_DEFINE([HAVE_BUILTIN_MUL_OVERFLOW_P], [1], [Define if your compiler supports __builtin_mul_overflow_p])
+fi
+
 AC_CONFIG_SUBDIRS([gettext-runtime libtextstyle gettext-tools])
 
 AM_EXTRA_RECURSIVE_TARGETS([maintainer-update-po])
diff -Naur gettext-0.20/gettext-runtime/gnulib-lib/intprops.h gettext-0.20.tpg/gettext-runtime/gnulib-lib/intprops.h
--- gettext-0.20/gettext-runtime/gnulib-lib/intprops.h	2019-01-06 12:16:15.000000000 +0000
+++ gettext-0.20.tpg/gettext-runtime/gnulib-lib/intprops.h	2019-05-14 20:16:49.541116986 +0000
@@ -227,14 +227,11 @@
 # define _GL_HAS_BUILTIN_OVERFLOW 0
 #endif
 
-/* True if __builtin_add_overflow_p (A, B, C) works.  */
-#define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__)
-
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
    (e.g., A and B) have the same type as MIN and MAX.  Instead, they assume
    that the result (e.g., A + B) has that type.  */
-#if _GL_HAS_BUILTIN_OVERFLOW_P
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define _GL_ADD_OVERFLOW(a, b, min, max)                               \
    __builtin_add_overflow_p (a, b, (__typeof__ ((a) + (b))) 0)
 # define _GL_SUBTRACT_OVERFLOW(a, b, min, max)                          \
diff -Naur gettext-0.20/gettext-runtime/gnulib-lib/mbrtowc.c gettext-0.20.tpg/gettext-runtime/gnulib-lib/mbrtowc.c
--- gettext-0.20/gettext-runtime/gnulib-lib/mbrtowc.c	2019-01-06 12:16:15.000000000 +0000
+++ gettext-0.20.tpg/gettext-runtime/gnulib-lib/mbrtowc.c	2019-05-14 20:22:49.757740212 +0000
@@ -36,7 +36,7 @@
 # include "verify.h"
 
 # ifndef FALLTHROUGH
-#  if __GNUC__ < 7
+#  if __GNUC__ < 7  || !__has_attribute(__fallthrough__)
 #   define FALLTHROUGH ((void) 0)
 #  else
 #   define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -Naur gettext-0.20/gettext-runtime/gnulib-lib/unistr/u8-uctomb-aux.c gettext-0.20.tpg/gettext-runtime/gnulib-lib/unistr/u8-uctomb-aux.c
--- gettext-0.20/gettext-runtime/gnulib-lib/unistr/u8-uctomb-aux.c	2019-01-06 12:16:16.000000000 +0000
+++ gettext-0.20.tpg/gettext-runtime/gnulib-lib/unistr/u8-uctomb-aux.c	2019-05-14 20:22:30.817268245 +0000
@@ -21,7 +21,7 @@
 #include "unistr.h"
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -Naur gettext-0.20/gettext-runtime/gnulib-lib/xalloc-oversized.h gettext-0.20.tpg/gettext-runtime/gnulib-lib/xalloc-oversized.h
--- gettext-0.20/gettext-runtime/gnulib-lib/xalloc-oversized.h	2019-01-06 12:16:16.000000000 +0000
+++ gettext-0.20.tpg/gettext-runtime/gnulib-lib/xalloc-oversized.h	2019-05-14 20:16:49.542116995 +0000
@@ -41,7 +41,7 @@
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
-#if 7 <= __GNUC__
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
diff -Naur gettext-0.20/gettext-runtime/intl/vasnprintf.c gettext-0.20.tpg/gettext-runtime/intl/vasnprintf.c
--- gettext-0.20/gettext-runtime/intl/vasnprintf.c	2019-03-30 11:35:12.000000000 +0000
+++ gettext-0.20.tpg/gettext-runtime/intl/vasnprintf.c	2019-05-14 20:22:05.975665952 +0000
@@ -119,7 +119,7 @@
 #endif
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -Naur gettext-0.20/gettext-runtime/libasprintf/vasnprintf.c gettext-0.20.tpg/gettext-runtime/libasprintf/vasnprintf.c
--- gettext-0.20/gettext-runtime/libasprintf/vasnprintf.c	2019-03-30 11:35:12.000000000 +0000
+++ gettext-0.20.tpg/gettext-runtime/libasprintf/vasnprintf.c	2019-05-14 20:23:09.389240557 +0000
@@ -119,7 +119,7 @@
 #endif
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -Naur gettext-0.20/gettext-tools/gnulib-lib/fnmatch.c gettext-0.20.tpg/gettext-tools/gnulib-lib/fnmatch.c
--- gettext-0.20/gettext-tools/gnulib-lib/fnmatch.c	2019-01-06 12:17:03.000000000 +0000
+++ gettext-0.20.tpg/gettext-tools/gnulib-lib/fnmatch.c	2019-05-14 20:28:44.080158402 +0000
@@ -66,7 +66,7 @@
 #include "flexmember.h"
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -Naur gettext-0.20/gettext-tools/gnulib-lib/intprops.h gettext-0.20.tpg/gettext-tools/gnulib-lib/intprops.h
--- gettext-0.20/gettext-tools/gnulib-lib/intprops.h	2019-01-06 12:17:04.000000000 +0000
+++ gettext-0.20.tpg/gettext-tools/gnulib-lib/intprops.h	2019-05-14 20:16:49.542116995 +0000
@@ -227,14 +227,11 @@
 # define _GL_HAS_BUILTIN_OVERFLOW 0
 #endif
 
-/* True if __builtin_add_overflow_p (A, B, C) works.  */
-#define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__)
-
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
    (e.g., A and B) have the same type as MIN and MAX.  Instead, they assume
    that the result (e.g., A + B) has that type.  */
-#if _GL_HAS_BUILTIN_OVERFLOW_P
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define _GL_ADD_OVERFLOW(a, b, min, max)                               \
    __builtin_add_overflow_p (a, b, (__typeof__ ((a) + (b))) 0)
 # define _GL_SUBTRACT_OVERFLOW(a, b, min, max)                          \
diff -Naur gettext-0.20/gettext-tools/gnulib-lib/mbrtowc.c gettext-0.20.tpg/gettext-tools/gnulib-lib/mbrtowc.c
--- gettext-0.20/gettext-tools/gnulib-lib/mbrtowc.c	2019-01-06 12:17:05.000000000 +0000
+++ gettext-0.20.tpg/gettext-tools/gnulib-lib/mbrtowc.c	2019-05-14 20:27:45.326261188 +0000
@@ -36,7 +36,7 @@
 # include "verify.h"
 
 # ifndef FALLTHROUGH
-#  if __GNUC__ < 7
+#  if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #   define FALLTHROUGH ((void) 0)
 #  else
 #   define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -Naur gettext-0.20/gettext-tools/gnulib-lib/quotearg.c gettext-0.20.tpg/gettext-tools/gnulib-lib/quotearg.c
--- gettext-0.20/gettext-tools/gnulib-lib/quotearg.c	2019-01-06 12:17:06.000000000 +0000
+++ gettext-0.20.tpg/gettext-tools/gnulib-lib/quotearg.c	2019-05-14 20:28:05.937920577 +0000
@@ -55,7 +55,7 @@
 #define INT_BITS (sizeof (int) * CHAR_BIT)
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -Naur gettext-0.20/gettext-tools/gnulib-lib/unistr/u8-uctomb-aux.c gettext-0.20.tpg/gettext-tools/gnulib-lib/unistr/u8-uctomb-aux.c
--- gettext-0.20/gettext-tools/gnulib-lib/unistr/u8-uctomb-aux.c	2019-01-06 12:17:07.000000000 +0000
+++ gettext-0.20.tpg/gettext-tools/gnulib-lib/unistr/u8-uctomb-aux.c	2019-05-14 20:27:20.575478695 +0000
@@ -21,7 +21,7 @@
 #include "unistr.h"
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -Naur gettext-0.20/gettext-tools/gnulib-lib/vasnprintf.c gettext-0.20.tpg/gettext-tools/gnulib-lib/vasnprintf.c
--- gettext-0.20/gettext-tools/gnulib-lib/vasnprintf.c	2019-03-20 21:00:09.000000000 +0000
+++ gettext-0.20.tpg/gettext-tools/gnulib-lib/vasnprintf.c	2019-05-14 20:28:25.638557138 +0000
@@ -119,7 +119,7 @@
 #endif
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -Naur gettext-0.20/gettext-tools/gnulib-lib/xalloc-oversized.h gettext-0.20.tpg/gettext-tools/gnulib-lib/xalloc-oversized.h
--- gettext-0.20/gettext-tools/gnulib-lib/xalloc-oversized.h	2019-01-06 12:17:07.000000000 +0000
+++ gettext-0.20.tpg/gettext-tools/gnulib-lib/xalloc-oversized.h	2019-05-14 20:16:49.542116995 +0000
@@ -41,7 +41,7 @@
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
-#if 7 <= __GNUC__
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
diff -Naur gettext-0.20/gettext-tools/gnulib-tests/macros.h gettext-0.20.tpg/gettext-tools/gnulib-tests/macros.h
--- gettext-0.20/gettext-tools/gnulib-tests/macros.h	2019-01-06 12:17:10.000000000 +0000
+++ gettext-0.20.tpg/gettext-tools/gnulib-tests/macros.h	2019-05-14 20:26:56.686733547 +0000
@@ -22,7 +22,7 @@
 #include <stdlib.h>
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -Naur gettext-0.20/gettext-tools/libgettextpo/intprops.h gettext-0.20.tpg/gettext-tools/libgettextpo/intprops.h
--- gettext-0.20/gettext-tools/libgettextpo/intprops.h	2019-01-06 12:17:59.000000000 +0000
+++ gettext-0.20.tpg/gettext-tools/libgettextpo/intprops.h	2019-05-14 20:16:49.543117005 +0000
@@ -227,14 +227,11 @@
 # define _GL_HAS_BUILTIN_OVERFLOW 0
 #endif
 
-/* True if __builtin_add_overflow_p (A, B, C) works.  */
-#define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__)
-
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
    (e.g., A and B) have the same type as MIN and MAX.  Instead, they assume
    that the result (e.g., A + B) has that type.  */
-#if _GL_HAS_BUILTIN_OVERFLOW_P
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define _GL_ADD_OVERFLOW(a, b, min, max)                               \
    __builtin_add_overflow_p (a, b, (__typeof__ ((a) + (b))) 0)
 # define _GL_SUBTRACT_OVERFLOW(a, b, min, max)                          \
diff -Naur gettext-0.20/gettext-tools/libgettextpo/mbrtowc.c gettext-0.20.tpg/gettext-tools/libgettextpo/mbrtowc.c
--- gettext-0.20/gettext-tools/libgettextpo/mbrtowc.c	2019-01-06 12:17:59.000000000 +0000
+++ gettext-0.20.tpg/gettext-tools/libgettextpo/mbrtowc.c	2019-05-14 20:25:43.729524283 +0000
@@ -36,7 +36,7 @@
 # include "verify.h"
 
 # ifndef FALLTHROUGH
-#  if __GNUC__ < 7
+#  if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #   define FALLTHROUGH ((void) 0)
 #  else
 #   define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -Naur gettext-0.20/gettext-tools/libgettextpo/unistr/u8-uctomb-aux.c gettext-0.20.tpg/gettext-tools/libgettextpo/unistr/u8-uctomb-aux.c
--- gettext-0.20/gettext-tools/libgettextpo/unistr/u8-uctomb-aux.c	2019-01-06 12:18:00.000000000 +0000
+++ gettext-0.20.tpg/gettext-tools/libgettextpo/unistr/u8-uctomb-aux.c	2019-05-14 20:25:22.787910096 +0000
@@ -21,7 +21,7 @@
 #include "unistr.h"
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -Naur gettext-0.20/gettext-tools/libgettextpo/vasnprintf.c gettext-0.20.tpg/gettext-tools/libgettextpo/vasnprintf.c
--- gettext-0.20/gettext-tools/libgettextpo/vasnprintf.c	2019-03-20 21:01:01.000000000 +0000
+++ gettext-0.20.tpg/gettext-tools/libgettextpo/vasnprintf.c	2019-05-14 20:26:06.530203439 +0000
@@ -119,7 +119,7 @@
 #endif
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -Naur gettext-0.20/gettext-tools/libgettextpo/xalloc-oversized.h gettext-0.20.tpg/gettext-tools/libgettextpo/xalloc-oversized.h
--- gettext-0.20/gettext-tools/libgettextpo/xalloc-oversized.h	2019-01-06 12:18:00.000000000 +0000
+++ gettext-0.20.tpg/gettext-tools/libgettextpo/xalloc-oversized.h	2019-05-14 20:16:49.543117005 +0000
@@ -41,7 +41,7 @@
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
-#if 7 <= __GNUC__
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
diff -Naur gettext-0.20/gettext-tools/libgrep/intprops.h gettext-0.20.tpg/gettext-tools/libgrep/intprops.h
--- gettext-0.20/gettext-tools/libgrep/intprops.h	2019-01-06 12:17:45.000000000 +0000
+++ gettext-0.20.tpg/gettext-tools/libgrep/intprops.h	2019-05-14 20:16:49.543117005 +0000
@@ -227,14 +227,11 @@
 # define _GL_HAS_BUILTIN_OVERFLOW 0
 #endif
 
-/* True if __builtin_add_overflow_p (A, B, C) works.  */
-#define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__)
-
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
    (e.g., A and B) have the same type as MIN and MAX.  Instead, they assume
    that the result (e.g., A + B) has that type.  */
-#if _GL_HAS_BUILTIN_OVERFLOW_P
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define _GL_ADD_OVERFLOW(a, b, min, max)                               \
    __builtin_add_overflow_p (a, b, (__typeof__ ((a) + (b))) 0)
 # define _GL_SUBTRACT_OVERFLOW(a, b, min, max)                          \
diff -Naur gettext-0.20/gettext-tools/libgrep/regex_internal.h gettext-0.20.tpg/gettext-tools/libgrep/regex_internal.h
--- gettext-0.20/gettext-tools/libgrep/regex_internal.h	2019-01-06 12:17:46.000000000 +0000
+++ gettext-0.20.tpg/gettext-tools/libgrep/regex_internal.h	2019-05-14 20:26:34.891062736 +0000
@@ -864,7 +864,7 @@
 #endif /* RE_ENABLE_I18N */
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -Naur gettext-0.20/libtextstyle/lib/intprops.h gettext-0.20.tpg/libtextstyle/lib/intprops.h
--- gettext-0.20/libtextstyle/lib/intprops.h	2019-03-11 19:40:29.000000000 +0000
+++ gettext-0.20.tpg/libtextstyle/lib/intprops.h	2019-05-14 20:16:49.543117005 +0000
@@ -227,14 +227,11 @@
 # define _GL_HAS_BUILTIN_OVERFLOW 0
 #endif
 
-/* True if __builtin_add_overflow_p (A, B, C) works.  */
-#define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__)
-
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
    (e.g., A and B) have the same type as MIN and MAX.  Instead, they assume
    that the result (e.g., A + B) has that type.  */
-#if _GL_HAS_BUILTIN_OVERFLOW_P
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define _GL_ADD_OVERFLOW(a, b, min, max)                               \
    __builtin_add_overflow_p (a, b, (__typeof__ ((a) + (b))) 0)
 # define _GL_SUBTRACT_OVERFLOW(a, b, min, max)                          \
diff -Naur gettext-0.20/libtextstyle/lib/vasnprintf.c gettext-0.20.tpg/libtextstyle/lib/vasnprintf.c
--- gettext-0.20/libtextstyle/lib/vasnprintf.c	2019-04-01 22:07:45.000000000 +0000
+++ gettext-0.20.tpg/libtextstyle/lib/vasnprintf.c	2019-05-14 20:21:32.854893941 +0000
@@ -119,7 +119,7 @@
 #endif
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
